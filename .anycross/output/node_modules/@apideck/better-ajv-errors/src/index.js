"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ValidationError", {
  enumerable: true,
  get: function () {
    return _ValidationError.ValidationError;
  }
});
exports.betterAjvErrors = void 0;
var _ValidationError = require("./types/ValidationError");
var _filter = require("./lib/filter");
var _suggestions = require("./lib/suggestions");
var _utils = require("./lib/utils");
const betterAjvErrors = ({
  errors,
  data,
  schema,
  basePath = '{base}'
}) => {
  if (!Array.isArray(errors) || errors.length === 0) {
    return [];
  }
  const definedErrors = (0, _filter.filterSingleErrorPerProperty)(errors);
  return definedErrors.map(error => {
    const path = (0, _utils.pointerToDotNotation)(basePath + error.instancePath);
    const prop = (0, _utils.getLastSegment)(error.instancePath);
    const defaultContext = {
      errorType: error.keyword
    };
    const defaultMessage = `${prop ? `property '${prop}'` : path} ${(0, _utils.cleanAjvMessage)(error.message)}`;
    let validationError;
    switch (error.keyword) {
      case 'additionalProperties':
        {
          const additionalProp = error.params.additionalProperty;
          const suggestionPointer = error.schemaPath.replace('#', '').replace('/additionalProperties', '');
          const {
            properties
          } = (0, _utils.safeJsonPointer)({
            object: schema,
            pnter: suggestionPointer,
            fallback: {
              properties: {}
            }
          });
          validationError = {
            message: `'${additionalProp}' property is not expected to be here`,
            suggestion: (0, _suggestions.getSuggestion)({
              value: additionalProp,
              suggestions: Object.keys(properties ?? {}),
              format: suggestion => `Did you mean property '${suggestion}'?`
            }),
            path,
            context: defaultContext
          };
          break;
        }
      case 'enum':
        {
          const suggestions = error.params.allowedValues.map(value => value.toString());
          const prop = (0, _utils.getLastSegment)(error.instancePath);
          const value = (0, _utils.safeJsonPointer)({
            object: data,
            pnter: error.instancePath,
            fallback: ''
          });
          validationError = {
            message: `'${prop}' property must be equal to one of the allowed values`,
            suggestion: (0, _suggestions.getSuggestion)({
              value,
              suggestions
            }),
            path,
            context: {
              ...defaultContext,
              allowedValues: error.params.allowedValues
            }
          };
          break;
        }
      case 'type':
        {
          const prop = (0, _utils.getLastSegment)(error.instancePath);
          const type = error.params.type;
          validationError = {
            message: `'${prop}' property type must be ${type}`,
            path,
            context: defaultContext
          };
          break;
        }
      case 'required':
        {
          validationError = {
            message: `${path} must have required property '${error.params.missingProperty}'`,
            path,
            context: defaultContext
          };
          break;
        }
      case 'const':
        {
          return {
            message: `'${prop}' property must be equal to the allowed value`,
            path,
            context: {
              ...defaultContext,
              allowedValue: error.params.allowedValue
            }
          };
        }
      default:
        return {
          message: defaultMessage,
          path,
          context: defaultContext
        };
    }

    // Remove empty properties
    const errorEntries = Object.entries(validationError);
    for (const [key, value] of errorEntries) {
      if (value === null || value === undefined || value === '') {
        delete validationError[key];
      }
    }
    return validationError;
  });
};
exports.betterAjvErrors = betterAjvErrors;
//# sourceMappingURL=index.js.map